IntStream/LongStream/DoubleStream can be used to directly create primitive stream.

-> peek(System.out::println), is used to look into list without making any change.

-> boxed() , its a wrapper class used to convert primtive and put it into list.

->BigInteger- used to print large values;

syntax example:
--mapToObj(BigInteger::valueOf) converts each long number into a BigInteger object.This is needed
 because BigInteger is an immutable class for handling very large numbers in Java,
 and we need it to perform multiplication without overflow.
-- reduce(BigInteger.ONE ,BigInteger::multiply)


jshell> IntStream.range(1,10).sum()
$1 ==> 45

jshell> IntStream.rangeClosed(1,10).sum()
$2 ==> 55

jshell> IntStream.iterate(1,i->i+2).limit(5).sum()
$4 ==> 25

jshell> IntStream.iterate(1,i->i+2).limit(5).peek(System.out::println).sum()
1
3
5
7
9
$5 ==> 25

jshell>  IntStream.iterate(2,i->i*2).limit(5).peek(System.out::println).sum()
2
4
8
16
32
$6 ==> 62


jshell> IntStream.iterate(2,i->i*2)
                   .limit(5)
                     .boxed()
                     .collect(Collectors.toList())
$7 ==> [2, 4, 8, 16, 32]



jshell> LongStream.range(1,30).reduce(1,(x,y)->x*y)
$12 ==> -7055958792655077376

jshell> LongStream.range(1,60)
           .mapToObj(BigInteger::valueOf)
             .reduce(BigInteger.ONE,BigInteger::multiply)

$13 ==> 138683118545689835737939019720389406345902876772687432540821294940160000000000000
