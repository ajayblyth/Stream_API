Intermeditae operations:
 The operations that are performed on a stream and they return a stream are called intermediate operations.
 e.g dinstinct(), sort(), map(), filter() etc.

 Terminal operations:
 they return something other than a stream , even just void.
 Example: forEach return void.
 .reduce returns an integer.


-----------------------------------------------------------------------------------

Why is Functional Programming Considered Lazy?
Functional programming (FP) is lazy because it delays computation until it is actually needed. This concept is known as lazy evaluation.
Instead of executing every function immediately, FP constructs a promise to execute it later when required.


example: ‚úî The filter() function does not execute immediately. It only runs when forEach() (a terminal operation) is called.
because of this performance is better as we are performing operations only when needed

 ----------------------------------------------------------------------------------------------


 1Ô∏è‚É£ Static Method Reference (ClassName::staticMethod)
 üëâ Used when referencing a static method of a class.
 üëâ No need to create an object of the class.

 ‚úÖ Example:

 class Utility {
     public static String toUpperCase(String str) {
         return str.toUpperCase();
     }
 }

 public class StaticMethodReference {
     public static void main(String[] args) {
         List<String> words = List.of("java", "spring", "hibernate");

         // Using static method reference
         List<String> upperCaseWords = words.stream()
                                            .map(Utility::toUpperCase) // Static method reference
                                            .collect(Collectors.toList());

         System.out.println(upperCaseWords);
     }
 }


 Utility::toUpperCase is a reference to a static method.
 It does not require an object of Utility.
 Syntax: ClassName::staticMethod.
 2Ô∏è‚É£ Non-Static (Instance) Method Reference (object::instanceMethod)
 üëâ Used when referencing an instance (non-static) method of a particular object.
 üëâ Requires an object to call the method.

 ‚úÖ Example:


 class Printer {
     public String printWithExclamation(String str) {
         return str + "!";
     }
 }

 public class InstanceMethodReference {
     public static void main(String[] args) {
         List<String> words = List.of("Hello", "World", "Java");

         Printer printer = new Printer(); // Creating an object

         // Using instance method reference
         words.forEach(printer::printWithExclamation); // Non-static method reference
     }
 }
 üîπ Key Points:
 printer::printWithExclamation is a reference to an instance method.
 Requires an object (printer) to call the method.
 Syntax: object::instanceMethod.
 3Ô∏è‚É£ Non-Static Method Reference on a Class (ClassName::instanceMethod)
 üëâ Used when referencing an instance method but without a specific object.
 üëâ The method will be called on each element of the stream.

 ‚úÖ Example:

 public class InstanceMethodRefOnClass {
     public static void main(String[] args) {
         List<String> words = List.of("hello", "world");

         // Using instance method reference on a class
         List<String> upperCaseWords = words.stream()
                                            .map(String::toUpperCase) // Calling toUpperCase() on each string
                                            .collect(Collectors.toList());

         System.out.println(upperCaseWords);
     }
 }
 üñ• Output:

 [HELLO, WORLD]
 üîπ Key Points:
 String::toUpperCase is a reference to an instance method.
 No specific object is provided; Java applies it to each element in the stream.
 Syntax: ClassName::instanceMethod.


 üöÄ When to Use Which?
 ‚úî Use static method reference when calling a utility/helper method (e.g., Math::max).
 ‚úî Use instance method reference when working with an already created object.
 ‚úî Use class instance method reference when calling methods on stream elements (String::toUpperCase).


 ---------------------------------------------------------------------------------------

Both statements create a list, but they have key differences in mutability and flexibility.

1Ô∏è‚É£ Using new ArrayList<>(Arrays.asList(1,2,3,4))

List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));

‚úÖ Mutable (e.g., add(), remove(), etc.).
‚úÖdynamically resizable.

2Ô∏è‚É£ Using Arrays.asList(...) directly

List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

‚ö† Partially mutable:
‚úÖ You can modify elements (set(index, value)).
‚ùå But you cannot add or remove elements (add(), remove(), etc.), because it's a fixed-size list.
This happens because Arrays.asList() returns a fixed-size list backed by the original array.
It is not a full ArrayList, but rather an internal static class (Arrays$ArrayList),
which does not support structural modifications.


Why is Arrays.asList() partially mutable but not resizable?
Arrays.asList() creates a fixed-size list wrapper around an array.
The underlying array is still mutable, so set(index, value) works, but resizing (add() / remove()) is not
allowed because it would require changing the size of the underlying array, which is not supported.

Example to Show the Difference

        List<Integer> list1 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));

        List<Integer> list2 = Arrays.asList(1, 2, 3, 4, 5);

        list1.add(6); // ‚úÖ Works
        System.out.println("list1 after add: " + list1);

        // list2.add(6); // ‚ùå UnsupportedOperationException
        // list2.remove(1); // ‚ùå UnsupportedOperationException

        list2.set(0, 10); // ‚úÖ Works (modifying existing element)
        System.out.println("list2 after modification: " + list2);
    }
}

--------------------------------------------üîç Breakdown of Your Code

                                            List<String> locationsLength = locations.stream()
                                                    .map(x -> x + " " + x.length()) // `x.length()` is an int
                                                    .collect(Collectors.toList());

                                            System.out.println(locationsLength);
                                            x is a String.
                                            x.length() returns an int.
                                            x + " " + x.length():
                                            The + operator first encounters " ", which is a String.
                                            Since at least one operand is a String, Java automatically converts (x.length()) into a String.
                                            The result is a new String that contains both the original string and its length.