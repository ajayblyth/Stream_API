Intermeditae operations:
 The operations that are performed on a string and they return a string are called intermediate operations.
 e.g dinstinct(), sort(), map(), filter() etc.

 Terminal operations: they return something other than a stream , even just void.
 Example: forEach return void.
 .collect returns a list.
 .reduce returns an integer.

 ---------------------------------------------------------------------------------------
Both statements create a list, but they have key differences in mutability and flexibility.

1Ô∏è‚É£ Using new ArrayList<>(Arrays.asList(1,2,3,4))

List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));

‚úÖ Mutable (e.g., add(), remove(), etc.).
‚úÖdynamically resizable.

2Ô∏è‚É£ Using Arrays.asList(...) directly

List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

‚ö† Partially mutable:
‚úÖ You can modify elements (set(index, value)).
‚ùå But you cannot add or remove elements (add(), remove(), etc.), because it's a fixed-size list.
This happens because Arrays.asList() returns a fixed-size list backed by the original array.
It is not a full ArrayList, but rather an internal static class (Arrays$ArrayList),
which does not support structural modifications.


Why is Arrays.asList() partially mutable but not resizable?
Arrays.asList() creates a fixed-size list wrapper around an array.
The underlying array is still mutable, so set(index, value) works, but resizing (add() / remove()) is not
allowed because it would require changing the size of the underlying array, which is not supported.

Example to Show the Difference

        List<Integer> list1 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));

        List<Integer> list2 = Arrays.asList(1, 2, 3, 4, 5);

        list1.add(6); // ‚úÖ Works
        System.out.println("list1 after add: " + list1);

        // list2.add(6); // ‚ùå UnsupportedOperationException
        // list2.remove(1); // ‚ùå UnsupportedOperationException

        list2.set(0, 10); // ‚úÖ Works (modifying existing element)
        System.out.println("list2 after modification: " + list2);
    }
}

--------------------------------------------üîç Breakdown of Your Code
                                            java
                                            Copy
                                            Edit
                                            List<String> locationsLength = locations.stream()
                                                    .map(x -> x + " " + x.length()) // `x.length()` is an int
                                                    .collect(Collectors.toList());

                                            System.out.println(locationsLength);
                                            x is a String.
                                            x.length() returns an int.
                                            x + " " + x.length():
                                            The + operator first encounters " ", which is a String.
                                            Since at least one operand is a String, Java automatically converts (x.length()) into a String.
                                            The result is a new String that contains both the original string and its length.